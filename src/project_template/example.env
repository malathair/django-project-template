# Example settings .env file. This should be stored at the root of the django project at src/.env
# (Same location where manage.py can also be found)

# This setting is optional and will default to False unless specified here
# Uncomment to enable debugging
# 
# SECURITY WARNING: Don't run with debug turned on in production!
# 
# DJANGO_DEBUG=True


# This setting is required to run the project. You can generate a random key by running
# the gen_secret.py file at the root of the repository
# 
# SECURITY WARNING: Keep the secret key used in production secret!
# 
# DJANGO_SECRET=<secret-key-here>
DJANGO_SECRET=django-insecure-ee)c9%)7dr8kq!w*(u8_yj#5w25pra2d%-ulv#zc&=d^&gp40e


# This setting is required for production or when running a development server and is a list of
# host IPs or FQDNs that Django is allowed to serve content from to prevent HTTP Host header
# attacks. When DEBUG is True and ALLOWED_HOSTS is empty, the host is validated against
# ['.localhost', '127.0.0.1', '[::1]']. Setting to ['*'], can be useful in development if the
# application isn't being run on localhost
# 
# SECURITY WARNING: Don't set this to ['*'] in production as this effectively disables all validation!
# 
# DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1


# This setting defines a list of trusted origins for unsafe requests (e.g. POST).
# 
# For requests that include the Origin header, Django’s CSRF protection requires that header match
# the origin present in the Host header. For a secure unsafe request that doesn’t include the Origin
# header, the request must have a Referer header that matches the origin present in the Host header.
# 
# These checks prevent, for example, a POST request from subdomain.example.com from succeeding
# against api.example.com. If you need cross-origin unsafe requests, add https://<fqdn> to this
# list, replacing <fqdn> with the fully qualified domain name of the origin header. You can also add
# allow request originating from an insecure page by adding http://<fqdn>. The setting also supports
# subdomain wildcards, so you could add 'https://*.example.com', to allow access from all subdomains
# of example.com.
# 
# CSRF_TRUSTED_ORIGINS=https://<fqdn>,https://<alt-fqdn>


# A boolean that specifies whether to use the X-Forwarded-Host header in preference to the Host
# header. This should only be enabled if a proxy (i.e. nginx) which sets this header is in use.
# 
# USE_X_FORWARDED_HOST=True


# This setting is optional and the application will default to a sqlite3 database stored at the root
# of the django project
# 
# Common Schemas:
# MySQL      - "mysql://user:password@host:port/dbname"
# PostgreSQL - "postgres://user:password@host:port/dbname"
# SQLite     - "sqlite:////absolute/path/to/db/file"
# 
# Refer to the documentation at https://django-environ.readthedocs.io/en/latest/types.html#environ-env-db-url
# for a complete list of url schemas.
# 
# DATABASE_URL=postgres://user:password@host:port/dbname


# This setting defines the location where all log files generated by the application will be stored.
# Typically this will be somewhere under /var/log most commonly in a directory named after the
# application.
# 
# LOG_ROOT="/var/log/<app-log-dir>"


# This setting defines the location where all static files generated by the application will be
# stored. It is recommended that this be in the same location as the rest of the application files.
# Common convention is to install all application files to /opt under a folder named after the
# application.
# 
# STATIC_ROOT="/opt/<app-dir>/static"

